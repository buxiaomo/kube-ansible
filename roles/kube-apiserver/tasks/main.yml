---
# tasks file for kube-apiserver
- name: Install the binary
  copy: 
    src: '{{ item }}'
    dest: /usr/local/bin/
    mode: 0755
    owner: root
    group: root
  with_items:
    - kube-apiserver
    - kubectl
  notify: Start the service

- name: Distribution of certificate
  copy: 
    src: '{{ item }}'
    dest: '{{ca.kubernetes.location }}'
    owner: root
    group: root
  with_items:
    - '{{ca.kubernetes.location }}/ca.crt'
    - '{{ca.kubernetes.location }}/etcd/ca.crt'
    - '{{ca.kubernetes.location }}/apiserver-etcd-client.crt'
    - '{{ca.kubernetes.location }}/apiserver-etcd-client.key'
    - '{{ca.kubernetes.location }}/apiserver-kubelet-client.crt'
    - '{{ca.kubernetes.location }}/apiserver-kubelet-client.key'
    - '{{ca.kubernetes.location }}/sa.pub'
    - '{{ca.kubernetes.location }}/sa.crt'
    - '{{ca.kubernetes.location }}/apiserver.crt'
    - '{{ca.kubernetes.location }}/apiserver.key'
    - '{{ca.kubernetes.location }}/front-proxy-ca.crt'
    - '{{ca.kubernetes.location }}/front-proxy-client.crt'
    - '{{ca.kubernetes.location }}/front-proxy-client.key'

- name: Create kubeconfig
  shell: |
    kubectl config set-cluster {{ kubernetes.name }} \
      --certificate-authority=/etc/kubernetes/pki/ca.crt \
      --embed-certs=true \
      --server={{ ansible_default_ipv4.address }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }} && \
     kubectl config set-credentials {{ item.KUBE_USER }} \
      --client-certificate=/etc/kubernetes/pki/{{ item.KUBE_CERT }}.crt \
      --client-key=/etc/kubernetes/pki/{{ item.KUBE_CERT }}.key \
      --embed-certs=true \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }} && \
     kubectl config set-context {{ item.KUBE_USER }}@{{ kubernetes.name }} \
      --cluster={{ kubernetes.name }} \
      --user={{ item.KUBE_USER }} \
      --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }} && \
     kubectl config use-context {{ item.KUBE_USER }}@{{ kubernetes.name }} --kubeconfig=/etc/kubernetes/{{ item.KUBE_CONFIG }} 
  with_items:
    - { KUBE_USER: 'system:kube-controller-manager', KUBE_CERT: "sa", KUBE_CONFIG: 'controller-manager.kubeconfig' }
    - { KUBE_USER: 'system:kube-scheduler', KUBE_CERT: "kube-scheduler", KUBE_CONFIG: 'scheduler.kubeconfig'}
    - { KUBE_USER: 'kubernetes-admin', KUBE_CERT: "admin", KUBE_CONFIG: 'admin.kubeconfig'}

- name: Install systemd file
  template: 
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
  notify: Start the service